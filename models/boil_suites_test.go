// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Caches", testCaches)
	t.Run("Subscriptions", testSubscriptions)
}

func TestDelete(t *testing.T) {
	t.Run("Caches", testCachesDelete)
	t.Run("Subscriptions", testSubscriptionsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Caches", testCachesQueryDeleteAll)
	t.Run("Subscriptions", testSubscriptionsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Caches", testCachesSliceDeleteAll)
	t.Run("Subscriptions", testSubscriptionsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Caches", testCachesExists)
	t.Run("Subscriptions", testSubscriptionsExists)
}

func TestFind(t *testing.T) {
	t.Run("Caches", testCachesFind)
	t.Run("Subscriptions", testSubscriptionsFind)
}

func TestBind(t *testing.T) {
	t.Run("Caches", testCachesBind)
	t.Run("Subscriptions", testSubscriptionsBind)
}

func TestOne(t *testing.T) {
	t.Run("Caches", testCachesOne)
	t.Run("Subscriptions", testSubscriptionsOne)
}

func TestAll(t *testing.T) {
	t.Run("Caches", testCachesAll)
	t.Run("Subscriptions", testSubscriptionsAll)
}

func TestCount(t *testing.T) {
	t.Run("Caches", testCachesCount)
	t.Run("Subscriptions", testSubscriptionsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Caches", testCachesHooks)
	t.Run("Subscriptions", testSubscriptionsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Caches", testCachesInsert)
	t.Run("Caches", testCachesInsertWhitelist)
	t.Run("Subscriptions", testSubscriptionsInsert)
	t.Run("Subscriptions", testSubscriptionsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Caches", testCachesReload)
	t.Run("Subscriptions", testSubscriptionsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Caches", testCachesReloadAll)
	t.Run("Subscriptions", testSubscriptionsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Caches", testCachesSelect)
	t.Run("Subscriptions", testSubscriptionsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Caches", testCachesUpdate)
	t.Run("Subscriptions", testSubscriptionsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Caches", testCachesSliceUpdateAll)
	t.Run("Subscriptions", testSubscriptionsSliceUpdateAll)
}
